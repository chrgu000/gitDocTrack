package com.avantport.avp.njpb.okhttp;import android.os.Handler;import android.os.Looper;import android.util.Base64;import com.avantport.avp.njpb.uitls.SpUtil;import com.google.gson.Gson;import java.io.File;import java.io.IOException;import java.util.List;import java.util.Map;import java.util.concurrent.TimeUnit;import okhttp3.Call;import okhttp3.Callback;import okhttp3.FormBody;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.RequestBody;import okhttp3.Response;/** * OkHttp使用单利进行封装 */public class OkHttpUtils {    private OkHttpClient client;    private volatile static OkHttpUtils mOkHttputils;    private Handler handler;    private String newUrl;    private static final MediaType JSON = MediaType.parse("application/json;charset=utf-8");    private static final MediaType MEDIA_TYPE_PNG = MediaType.parse("image/png");    private static Gson gson;    private OkHttpUtils() {        client = new OkHttpClient()                .newBuilder()               .addInterceptor(new TokenInterceptor())                .readTimeout(20, TimeUnit.SECONDS)                .connectTimeout(10, TimeUnit.SECONDS)                .writeTimeout(20, TimeUnit.SECONDS)                .build();        handler = new Handler(Looper.getMainLooper());        gson = new Gson();    }    public static OkHttpUtils getInstance() {        if (mOkHttputils == null) {            synchronized (OkHttpUtils.class) {                    mOkHttputils = new OkHttpUtils();            }        }        return mOkHttputils;    }    enum HttpMethodType {        GET,        POST,        PUT,    }    /**     * 向服务器提交String请求     *     * @param url     * @param content     * @param callBack     */    //提交json数据到服务器    public void sendStringByPostMethod(String url, String content, final OkHttpBaseCallback callBack) {        Request request = new Request.Builder()                .url(url)                .addHeader("Authorization", SpUtil.getValue("token"))//添加请求头                .post(RequestBody.create(JSON, content)).build();        request(request, null, callBack);    }    /**     * //进行登录的操作     */    public <T> void loginPost(String url, Map<String, Object> param, OkHttpBaseCallback callback) {        Request request = buildRequest(url, param);        request(request, null, callback);    }    /**     * 利用Get请求得到Json对象     *     * @param url     * @param callback     */    public <T> void get(String url, Map<String, Object> param, Class<T> clazz, OkHttpBaseCallback callback) {        Request request = buildGetRequest(url, param);        request(request, clazz, callback);    }    /**     * 利用PUT请求提交     */    public <T> void put(String url, Map<String, Object> param, Class<T> clazz, OkHttpBaseCallback callback) {        Request request = buildPutRequest(url, param);        request(request, clazz, callback);    }    /**     * 利用POST请求得到Json对象     *     * @param url     * @param callback     */    public <T> void post(String url, Map<String, Object> param, Class<T> clazz, OkHttpBaseCallback callback) {        Request request = buildPostRequest(url, param);        request(request, clazz, callback);    }    public <T> void request(final Request request, final Class<T> clazz, final OkHttpBaseCallback callback) {        client.newCall(request).enqueue(new Callback() {            @Override            public void onFailure(Call call, IOException e) {                callbackError(callback, null, e);            }            @Override            public void onResponse(Call call, Response response) throws IOException {                if (response.isSuccessful()) {                    String resultStr = response.body().string();                    if (callback.mType == String.class) {                        callbackSuccess(callback, response, resultStr);                    } else {                        try {                            Object obj = gson.fromJson(resultStr, callback.mType);                            callbackSuccess(callback, response, obj);                        } catch (com.google.gson.JsonParseException e) { // Json解析的错误                            callback.onError(response, response.code(), e);                        }                    }                } else {                    callbackError(callback, response, null);                }            }        });    }    private void callbackSuccess(final OkHttpBaseCallback callback, final Response response, final Object obj) {        handler.post(new Runnable() {            @Override            public void run() {                callback.onSuccess(response, obj);            }        });    }    private void callbackError(final OkHttpBaseCallback callback, final Response response, final Exception e) {        handler.post(new Runnable() {            @Override            public void run() {                if (response == null) {                    callback.onError(response, 0, e);                } else {                    callback.onError(response, response.code(), e);                }            }        });    }    private Request buildPostRequest(String url, Map<String, Object> params) {        return buildRequest(url, HttpMethodType.POST, params);    }    private Request buildPutRequest(String url, Map<String, Object> params) {        return buildRequest(url, HttpMethodType.PUT, params);    }    private Request buildGetRequest(String url, Map<String, Object> params) {        return buildRequest(url, HttpMethodType.GET, params);    }    private Request buildRequest(String url, HttpMethodType methodType, Map<String, Object> params) {        //当是get的请求时，将参数拼接在URL后面        if (methodType == HttpMethodType.GET) {            newUrl = changeGetUrl(url, params);        } else if (methodType == HttpMethodType.POST || methodType == HttpMethodType.PUT) {            newUrl = url;        }        Request.Builder builder = new Request.Builder()                .url(newUrl)                .addHeader("Authorization", SpUtil.getValue("token"));//添加请求头        if (methodType == HttpMethodType.POST) {            RequestBody body = builderFormData(params);            builder.post(body);        } else if (methodType == HttpMethodType.PUT) {            RequestBody body = builderFormData(params);            builder.put(body);        } else if (methodType == HttpMethodType.GET) {            builder.get();        }        return builder.build();    }    public Request buildRequest(String url, Map<String, Object> param) {        String userNamePassword = "client:client";        String base64 = Base64.encodeToString(userNamePassword.getBytes(), Base64.DEFAULT).trim();        Request.Builder builder = new Request.Builder()                .url(url)                .addHeader("Authorization", "Basic " + base64);//添加请求头        RequestBody body = builderFormData(param);        builder.post(body);        return builder.build();    }    private String changeGetUrl(String url, Map<String, Object> params) {        if (params == null || params.size() == 0) {//判断是否有参数            return url;        } else {            StringBuffer buffer = new StringBuffer();//拼接get请求的新的url            buffer.append(url).append("?");            if (params != null && !params.isEmpty()) {                for (Map.Entry<String, Object> entry : params.entrySet()) {                    buffer.append(entry.getKey()).append("=").append(entry.getValue()).append("&");                }            }            return buffer.toString().substring(0, buffer.toString().length() - 1);        }    }    private RequestBody builderFormData(Map<String, Object> params) {        FormBody.Builder form_builder = new FormBody.Builder();//表单对象，包含以input开始的对象，以html表单为主        if (params != null && !params.isEmpty()) {            for (Map.Entry<String, Object> entry : params.entrySet()) {                if (entry.getKey() == null || entry.getValue() == null) {                    //以防出现个别参数为空,报空指针闪退                } else {                    form_builder.add(entry.getKey(), (String) entry.getValue());                }            }        }        return form_builder.build();    }    private MultipartBody builderMultiData(List<String> mImgUrls) {        MultipartBody.Builder builder = new MultipartBody.Builder().setType(MultipartBody.FORM);        for (int i = 0; i < mImgUrls.size(); i++) {            File f = new File(mImgUrls.get(i));            if (f != null) {                builder.addFormDataPart("images", f.getName(), RequestBody.create(MEDIA_TYPE_PNG, f));            }        }        return builder.build();    }    public Request buildRequest(String url, List<String> files) {        Request.Builder builder = new Request.Builder()                .url(url)                .addHeader("Authorization", SpUtil.getValue("token"));//添加请求头        MultipartBody body = builderMultiData(files);        builder.post(body);        return builder.build();    }    public void postImg(String url, List<String> imgUrl, OkHttpBaseCallback callback) {        Request request = buildRequest(url, imgUrl);        request(request, null, callback);    }}